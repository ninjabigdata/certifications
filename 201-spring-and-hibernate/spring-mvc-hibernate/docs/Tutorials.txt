Why Spring?
	Simplifies java enterprise app development

Goals of Spring
	Light-weight development model
	Loose coupling using DI
	Declarative Prorgramming
		AOP
	Reduce boilerplate code

Spring Architecture
	Core Container
		Core & Beans
			IOC
			DI
		Context
			Provides bean factory
			Decouples the dependency from the biz logic
			I18N support
		Expression Language
			For querying and manipulating object-graph at run-time
			extn. of EL provided in JSP
	Data Access / Integration
		JDBC
			Built-in support for JDBC
		ORM
			Integration for JPA
		OXM
			Abstraction for object/XML mapping using JAXB
		JMS
			Messages
		Transactions
			Database transactions
	Web
		Web Sockets
		Web Servlets
		Web Structs
		Web Portal
	AOP
		Provides cross-cutting features
	Test

IoC
	Design process of externalizing the construction and management of your objects

Tag Library
	Provided by spring to construct views
	Advantages over HTML tags
		Support data bindings with POJO and also bean
		Configurable
		Easier to develop and maintain JSP pages
		Comes along with spring MVC
	Adding Spring forms to JSP
		<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	Spring Tags
		form
		input
		checkboxes
		radiobutton
		select & option
		textarea
		hidden
		errors

JSR Validation
	Custom Validation
		1. Create Annotation
			@Constraint(validatedBy = <ValidationClassName>.class)
			@Target({ElementType.METHOD, ElementType.FIELD})
			@Retention(RetentionPolicy.RUNTIME)
			public @interface AnnotationName {
			
			}
		2. Create Validation Class
			public class ValidatorClass implements ConstraintValidator<AnnotationName, DateType> {
				@Override
				public Boolean isvalid(...) {
					// Write custome rules
				}
			}
		3. Add the custom annotation to method or field
		4. Update the view to display error