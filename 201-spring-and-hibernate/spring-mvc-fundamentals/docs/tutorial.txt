Spring MVC
	Teminologies
		SPA
			Single Page Application
		Dispatcher Servlet
			Entry Point
		Controller
			Command Pattern Handler
		Request Mapping
			URL and Request Type
		View Resolver
			Locates View to serve
		servlet-config
			Configuration file
		POJO
			Plain Old Java Object
		Bean
			Spring Configured POJO
	
	Configuring controller for spring MVC
		To get and return model from view and sending to view, use @ModelAttribute for the model object
		To configuring the model in jsp:
			Add the below taglib
				<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
			Add the model to form using modelAttribute
				<form:form modelAttribute="model">
			To use the modelAttribute's attribute in jsp
				<form:input path="name"/>
	
	Configuring project as war for deploying app on standalone server
		Change the packaging as war in pom.xml
			<packaging>war</packaging>
		Extend the SpringBootServletInitializer class in Spring boot starter class
	
	Using java class for configuration instead of application.properties file
		Create a class implementing WebMvcConfigurer interface. Annonate this class with @Configuration
		Configure ViewResolver in Configuration class
			Add bean for ViewResolver
				Create object for InternalViewResolver
					Add prefix, suffix and also order (integer) for resolving multiple views
		Configuring static files
			Override addResourceHandlers(ResourceHandlerRegistry registry)
				Add the resourceHandler and resourceLocations to registry
				Eg: registry.addResourceHandler("/files/**").addResourceLocations("/WEB-INF/pdf/")
	
	Interceptors
		Intercepts the call to server and perform spl tasks on the call.
		Eg: logging, security, I18N, performance monitoring
	
	Adding I18N to Spring MVC App
		Changes to be done in configuration class
			Create the following beans in Configuration class
				LocaleResolver
					Create an object of SessionLocaleResolver and set the default locale
				LocaleChangeInterceptor
					Create an object of LocaleChangeInterceptor and the parameter based on which locale has to be changed
			Override the addInterceptors() and add the LocaleChangeInterceptor bean method to the InterceptoRegistry object (provided as input to addInterceptors())
		In JSP
			Add the taglib
				<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
				
	Handle POST-Redirect-GET
		prefix redirect: to the view
		Eg: redirect:registration
			This redirects to get call of registration
	
	Thymeleaf for UI
		Template tools for UI
		Easier to implement
		
		Configuring
			Add the Thymeleaf dependency to pom.xml
				<dependency>
					<groupId>org.thymeleaf</groupId>
					<artifactId>thymeleaf-spring5</artifactId>
				</dependency>
			Add the following beans in springboot configuration class
				Configure SpringResourceTemplateResolver bean and set the following
					applicationContext	--> autowire the applicationContext and use it here
					prefix				--> /WEB-INF/views/				
					suffix				--> .html
				Configure SpringTemplateEngine bean and set the following
					TemplateResolver		--> use the SpringResourceTemplateResolver bean method
					EnableSpringELCompiler	--> true
				Configure ViewResolver for thymeleaf
					Create an object of ThymeleafViewResolver and add the following
						TemplateEngine	--> use the SpringTemplateEngine bean's method
						Order			--> lower than jsp's viewResolver order
			Using Thymeleaf Templates
				Create a sample html file in WEB-INF/views/
				Add the following thymeleaf namespace to the html tag
					<html xmlns:th="http://www.thymeleaf.org">
				For mapping the modelAttribute value use text
					<p th:text="${message}"></p>
	
	Bean Validation
		was introduced in JSR 303, followed by 349 and 380
		380 allows optional and typescript
		
		validator Interface
			Older approach
			But not deprecated
			Business logic goes into layer
		
		Configuring Bean Validator
			Add the hibernate-validator dependency
				<groupId>org.hibernate.validator</groupId>
				<artifactId>hibernate-validator</artifactId>
		
		Validating ModelAttribute
			Annonate the ModelAttribute with @Valid
			Add the required validation in POJO
				@NotEmpty (import from javax) --> Not empty validation
			Add the BindingResult object to input parameters
			Checking errors in BindingResult object (result)
				Do this in controller
					if (result.hasErrors()) {
						return "registration";
					}
			To handle / show errors in validation
				Add the form:errors inside form:from tag (1st line)
					<form:errors path="*" cssClass="errorblock" element="div" />
					
			Customize Error Message 
				For Field specific
					Add the form:errors as before but specified the field name in path index of wildcard
						<form:errors path="name" cssClass="error" element="p" />
						
				Add custom error message instead of default
					Add the validation message in messages bundle
						Format: ValidationType.objectname.field
							Eg: NotEmpty.registration.name
							
	Use RestController to Spring MVC
		All the bean validation, I18N are valid here too
		
	Integrate JQuery
		
	