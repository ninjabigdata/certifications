Object to DB Mapping
	Object Relational Mapping
		Mapping object into database tables. Converting the object to DB format for storing data and vice verse for retrieving data from DB
	
	Java Persistance API
		Annotate the java class for mapping the object to database
		@Entity -> annotate the class that maps this class to DB table
		@Id		-> annotate the attribute which can unqiuely identify the row in table
		@GeneratedValue(strategy=GenerationType.AUTO)
			Generates a new unique value on creating object
	
	Spring Repository
		CrudRepository<EntityClass, Type_of_Id>
		
Session
	How long session will exist
	what data available in session
	how to track session and re-establish session if connection reconnects
	prevent session hijacking
	
	types of session
		session info will be sent as cookie to the client
		server sends id as session and all other info will be stored in server aka server side session
		Server has essential data and other data on client
		encode session data in header and client decrypts the same
		token
		
Spring Data REST
	Exposes the respository as REST to client by internally creating a REST controller
	Annotate the repository with @RepositoryRestResource(path, collectionResourceRef="") --> 2nd param how to refer the collection of object of that repo
	All the methods of the repository will be exposed without annotating the methods
	for eg: save<T>
		exposed as post http service accepting the data as response body
		findAll
			get http service
	This eliminate the controller and service layer if any
	for findByXXX methods are exposed as get path/search/findByXXX
	use @Param for mapping the input to the method
	Specify the RepositoryRestResource in the configuration
		in spring boot starter class
			@Import({RepositoryRestResource.class})
			@EnableJpaRespository / @ComponentScan(specify repo package)
			
NoSQL Databases
	Like giant hash map - key value pairs
	Demerits
		Not easy for joining as easy as in SQL
	Varieties of NoSQL
		Key-value pairs
		Big Table
		Document oriented
			May store data as JSON eg: MongoDB
		Graph
		
	Optimizing for Query Patterns
		Grp the data in an entity
	
	Optimizing for Reads vs Writes
		Based on app
		
	Write Contention & Sharding

Spring Data MongoDB
	EntityClass
		@Id has to be springframework.data package instead of jpa
	Specify the data source in pom / gradle

Amazon Dynamo DB
	Provided by Amazon
	Pay based on read/write operations per second
	Changes to be done
		Entity
			Annotate using @DynamoDBTable(tableName = "table")
			For Id
				Annotate the getter of id with
					@DynamoDBHashKey
					@DynamoDBAutoGeneratedKey
				Types of Id
					Hash
					HashWithRange
			For other attributes
				Annotate with @DynamoDBAttribute
		ApplicationConfiguration
			Add the annotation @EnableDynamoDBRepositories
			
WAR --> Web Application Resource
	Folder structure of WAR
		WEB-INF --> private folder
			web.xml
			classes --> has cla
			lib --> has jars
		javascript
		html
		views
		
		the other directories mentioned above except WEB-INF are specific to application
	
Deploying to Amazon Elastic Beanstalk
	To run Springboot app in standalone server
		Create a class extending SpringBootServletInitializer class
			Override the configure method to return application.sources(<SpringBootStarterClass>.class)